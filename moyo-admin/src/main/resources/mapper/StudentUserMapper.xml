<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.StudentUserMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.StudentUser">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="studentNo" jdbcType="VARCHAR" property="studentNo" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="createBy" jdbcType="VARCHAR" property="createBy" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="updateBy" jdbcType="VARCHAR" property="updateBy" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, studentNo, username, password,createBy,updateBy,createTime,updateTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from studentuser
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from studentuser
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.StudentUser">
    insert into studentuser (id, studentNo, username,
      password,createBy,updateBy,createTime,updateTime)
    values (#{id,jdbcType=BIGINT}, #{studentNo,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR},
      #{password,jdbcType=VARCHAR}, #{createBy,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.StudentUser">
    insert into studentuser
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentNo != null">
        studentNo,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      createBy,
      createTime
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="studentNo != null">
        #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      #{createBy,jdbcType=VARCHAR},
      sysdate()
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.StudentUser">
    update studentuser
    <set>
      <if test="studentNo != null">
        studentNo = #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="updateBy != null">
        updateBy = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.StudentUser">
    update studentuser
    set studentNo = #{studentNo,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      updateBy = #{updateBy,jdbcType=VARCHAR},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!--新增的-->

  <sql id="selectStudentUserVo">
        select id, studentNo, username, password,createBy,updateBy,createTime,updateTime
        from studentUser
    </sql>

  <select id="selectStudentUserList" parameterType="com.example.demo.model.StudentUser" resultMap="BaseResultMap">
    <include refid="selectStudentUserVo"/>
    <where>
      <if test="studentNo != null and studentNo != ''">
        AND studentNo like concat('%', #{studentNo}, '%')
      </if>
      <if test="username != null and username != ''">
        AND username like concat('%', #{username}, '%')
      </if>
    </where>
  </select>

  <select id="selectStudentUserAll" resultMap="BaseResultMap">
    <include refid="selectStudentUserVo"/>
  </select>

  <select id="selectStudentUserById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <include refid="selectStudentUserVo"/>
    where id = #{id}
  </select>

  <select id="selectStudentUserListByUserId" parameterType="java.lang.Long" resultType="java.lang.Long">
        select id
        from studentUser
        where id = #{id}
    </select>

  <select id="selectStudentUsersByUserName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select id, username, studentNo,createBy,updateBy,createTime,updateTime
        from studentUser
        where username = #{username}
    </select>

  <select id="checkStudentUserNameUnique" parameterType="java.lang.String" resultMap="BaseResultMap">
    <include refid="selectStudentUserVo"/>
    where username=#{username} limit 1
  </select>

  <select id="checkStudentUserNoUnique" parameterType="java.lang.String" resultMap="BaseResultMap">
    <include refid="selectStudentUserVo"/>
    where studentNo=#{studentNo} limit 1
  </select>

  <update id="updateStudentUser" parameterType="com.example.demo.model.StudentUser">
    update studentUser
    <set>
      <if test="studentNo != null and studentNo != ''">studentNo = #{studentNo},</if>
      <if test="username != null and username != ''">username = #{username},</if>
      <if test="password != null and password != ''">password = #{password},</if>
      <if test="updateBy != null and updateBy != ''">updateBy = #{updateBy},</if>
      updateTime = sysdate()
    </set>
    where id = #{id}
  </update>

  <insert id="insertStudentUser" parameterType="com.example.demo.model.StudentUser" useGeneratedKeys="true" keyProperty="id">
    insert into studentUser(
    <if test="id != null and id != 0">id,</if>
    <if test="studentNo != null and studentNo != ''">studentNo,</if>
    <if test="username != null and username != ''">username,</if>
    <if test="password != null and password != ''">password,</if>
    <if test="createBy != null and createBy != ''">createBy,</if>
    createTime
    )values(
    <if test="id != null and id != 0">#{id},</if>
    <if test="studentNo != null and studentNo != ''">#{studentNo},</if>
    <if test="username != null and username != ''">#{username},</if>
    <if test="password != null and password != ''">#{password},</if>
    <if test="createBy != null and createBy != ''">#{createBy},</if>
    sysdate()
    )
  </insert>

  <delete id="deleteStudentUserById" parameterType="java.lang.Long">
        delete from studentUser where id = #{id}
    </delete>

  <delete id="deleteStudentUserByIds" parameterType="java.lang.Long">
    delete from studentUser where id in
    <foreach collection="array" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>
</mapper>