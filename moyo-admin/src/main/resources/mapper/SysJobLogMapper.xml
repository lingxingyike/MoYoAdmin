<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.SysJobLogMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.SysJobLog">
    <id column="job_log_id" jdbcType="BIGINT" property="jobLogId" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="job_group" jdbcType="VARCHAR" property="jobGroup" />
    <result column="invoke_target" jdbcType="VARCHAR" property="invokeTarget" />
    <result column="job_message" jdbcType="VARCHAR" property="jobMessage" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="exception_info" jdbcType="VARCHAR" property="exceptionInfo" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    job_log_id, job_name, job_group, invoke_target, job_message, status, exception_info, 
    create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_job_log
    where job_log_id = #{jobLogId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_job_log
    where job_log_id = #{jobLogId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.SysJobLog">
    insert into sys_job_log (job_log_id, job_name, job_group, 
      invoke_target, job_message, status, 
      exception_info, create_time)
    values (#{jobLogId,jdbcType=BIGINT}, #{jobName,jdbcType=VARCHAR}, #{jobGroup,jdbcType=VARCHAR}, 
      #{invokeTarget,jdbcType=VARCHAR}, #{jobMessage,jdbcType=VARCHAR}, #{status,jdbcType=CHAR}, 
      #{exceptionInfo,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.SysJobLog">
    insert into sys_job_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobLogId != null">
        job_log_id,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="jobGroup != null">
        job_group,
      </if>
      <if test="invokeTarget != null">
        invoke_target,
      </if>
      <if test="jobMessage != null">
        job_message,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="exceptionInfo != null">
        exception_info,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobLogId != null">
        #{jobLogId,jdbcType=BIGINT},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null">
        #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="invokeTarget != null">
        #{invokeTarget,jdbcType=VARCHAR},
      </if>
      <if test="jobMessage != null">
        #{jobMessage,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="exceptionInfo != null">
        #{exceptionInfo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.SysJobLog">
    update sys_job_log
    <set>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobGroup != null">
        job_group = #{jobGroup,jdbcType=VARCHAR},
      </if>
      <if test="invokeTarget != null">
        invoke_target = #{invokeTarget,jdbcType=VARCHAR},
      </if>
      <if test="jobMessage != null">
        job_message = #{jobMessage,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="exceptionInfo != null">
        exception_info = #{exceptionInfo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where job_log_id = #{jobLogId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.SysJobLog">
    update sys_job_log
    set job_name = #{jobName,jdbcType=VARCHAR},
      job_group = #{jobGroup,jdbcType=VARCHAR},
      invoke_target = #{invokeTarget,jdbcType=VARCHAR},
      job_message = #{jobMessage,jdbcType=VARCHAR},
      status = #{status,jdbcType=CHAR},
      exception_info = #{exceptionInfo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where job_log_id = #{jobLogId,jdbcType=BIGINT}
  </update>
  <!--新的-->

  <resultMap type="com.example.demo.model.SysJobLog" id="SysJobLogResult">
    <id     property="jobLogId"       column="job_log_id"      />
    <result property="jobName"        column="job_name"        />
    <result property="jobGroup"       column="job_group"       />
    <result property="invokeTarget"   column="invoke_target"   />
    <result property="jobMessage"     column="job_message"     />
    <result property="status"         column="status"          />
    <result property="exceptionInfo"  column="exception_info"  />
    <result property="createTime"     column="create_time"     />
  </resultMap>

  <sql id="selectJobLogVo">
        select job_log_id, job_name, job_group, invoke_target, job_message, status, exception_info, create_time
		from sys_job_log
    </sql>

  <select id="selectJobLogList" parameterType="com.example.demo.model.SysJobLog" resultMap="SysJobLogResult">
    <include refid="selectJobLogVo"/>
    <where>
      <if test="jobName != null and jobName != ''">
        AND job_name like concat('%', #{jobName}, '%')
      </if>
      <if test="jobGroup != null and jobGroup != ''">
        AND job_group = #{jobGroup}
      </if>
      <if test="status != null and status != ''">
        AND status = #{status}
      </if>
      <if test="invokeTarget != null and invokeTarget != ''">
        AND invoke_target like concat('%', #{invokeTarget}, '%')
      </if>
      <if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
        and date_format(create_time,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')
      </if>
      <if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
        and date_format(create_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
      </if>
    </where>
  </select>

  <select id="selectJobLogAll" resultMap="SysJobLogResult">
    <include refid="selectJobLogVo"/>
  </select>

  <select id="selectJobLogById" parameterType="java.lang.Long" resultMap="SysJobLogResult">
    <include refid="selectJobLogVo"/>
    where job_log_id = #{jobLogId}
  </select>

  <delete id="deleteJobLogById" parameterType="java.lang.Long">
 		delete from sys_job_log where job_log_id = #{jobLogId}
 	</delete>

  <delete id="deleteJobLogByIds" parameterType="java.lang.Long">
    delete from sys_job_log where job_log_id in
    <foreach collection="array" item="jobLogId" open="(" separator="," close=")">
      #{jobLogId}
    </foreach>
  </delete>

  <update id="cleanJobLog">
        truncate table sys_job_log
    </update>

  <insert id="insertJobLog" parameterType="com.example.demo.model.SysJobLog">
    insert into sys_job_log(
    <if test="jobLogId != null and jobLogId != 0">job_log_id,</if>
    <if test="jobName != null and jobName != ''">job_name,</if>
    <if test="jobGroup != null and jobGroup != ''">job_group,</if>
    <if test="invokeTarget != null and invokeTarget != ''">invoke_target,</if>
    <if test="jobMessage != null and jobMessage != ''">job_message,</if>
    <if test="status != null and status != ''">status,</if>
    <if test="exceptionInfo != null and exceptionInfo != ''">exception_info,</if>
    create_time
    )values(
    <if test="jobLogId != null and jobLogId != 0">#{jobLogId},</if>
    <if test="jobName != null and jobName != ''">#{jobName},</if>
    <if test="jobGroup != null and jobGroup != ''">#{jobGroup},</if>
    <if test="invokeTarget != null and invokeTarget != ''">#{invokeTarget},</if>
    <if test="jobMessage != null and jobMessage != ''">#{jobMessage},</if>
    <if test="status != null and status != ''">#{status},</if>
    <if test="exceptionInfo != null and exceptionInfo != ''">#{exceptionInfo},</if>
    sysdate()
    )
  </insert>
</mapper>